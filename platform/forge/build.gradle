import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'mod-platform'
    id 'net.minecraftforge.gradle' version '[6.0.24,6.2)'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id "com.modrinth.minotaur" version "2.+"
}

mixin {
    add(sourceSets.main, "${mod_id}.refmap.json")
    config("${mod_id}.mixins.json")
    config("${mod_id}.forge.mixins.json")
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    copyIdeResources = true
    reobf = false

    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformer = at
    }

    runs {
        client {
            workingDirectory file('runs/client')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            mods {
                modClientRun {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory file('runs/server')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            mods {
                modServerRun {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory file('runs/data')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            mods {
                modDataRun {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

apply from: 'dependencies.gradle'

publishing {
    publications {
        mavenJava(MavenPublication) {
            fg.component(it)
        }
    }
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    dependsOn ':buildAll'
    group = 'publishing'
    apiToken = System.getenv('curseforge_token')

    def filePath = "output/${version}/${mod_id}-forge-${minecraft_version}-${version}.jar"
    def file = upload(curseforge_forge_id, rootProject.file(filePath))
    file.displayName = "${mod_name} ${version}"
    file.releaseType = publish_release_type
    file.changelog = rootProject.file('CHANGELOG.md').text
    file.changelogType = 'markdown'
    file.addGameVersion(minecraft_version)
    file.addModLoader("forge")
}

modrinth {
    token = System.getenv("modrinth_token")

    def filePath = "output/${version}/${mod_id}-forge-${minecraft_version}-${version}.jar"
    uploadFile = rootProject.file(filePath)
    projectId = "fragmentum"
    versionName = "${mod_name} ${version}"
    versionNumber = "${version}"
    versionType = publish_release_type
    changelog = rootProject.file('CHANGELOG.md').text
    gameVersions = [ minecraft_version ]
    loaders = ["forge"]
}

tasks.register('publishModrinth') {
    dependsOn ':buildAll'
    dependsOn 'modrinth'
    group = 'publishing'
}